Started with the C sharp tutorial on MSDN(Microsoft)
*Hello world
*Console.WriteLine()
*basic string interpolation 

*The key organizational concepts in C# are programs, namespaces, types, members, and assemblies.
C# programs consist of one or more source files. 
Programs declare types, which contain members and can be organized into namespaces.
Classes and interfaces are examples of types. 
Fields, methods, properties, and events are examples of members.
When C# programs are compiled, they are physically packaged into assemblies. 
Assemblies typically have the file extension .exe or .dll, depending on whether they implement applications or libraries, respectively.

*A static class is basically the same as a non-static class, but there is one difference: a static class cannot be instantiated. 
In other words, you cannot use the new operator to create a variable of the class type. 
Because there is no instance variable, you access the members of a static class by using the class name itself. 

*namespaces to organize its many classes
System is a namespace and Console is a class in that namespace.
The using keyword can be used so that the complete name is not required, as in the following example:

using System;
Console.WriteLine("Hello");
Console.WriteLine("World!");

*class is a reference type.
At run time, when you declare a variable of a reference type, the variable contains the value null 
until you explicitly create an instance of the class by using the new operator, 
or assign it an object of a compatible type that may have been created elsewhere

//[access modifier] - [class] - [identifier]
public class Customer
{
   // Fields, properties, methods and events go here...
}

*class and an object are different things. 
A class defines a type of object, but it is not an object itself.
An object is a concrete entity based on a class, and is sometimes referred to as an instance of a class.
Objects can be created by using the new keyword followed by the name of the class that the object will be based on.

Customer object1 = new Customer();

*Class inheritance
Classes fully support inheritance, a fundamental characteristic of object-oriented programming. 
When you create a class, you can inherit from any other interface or class that is not defined as sealed, and other classes can inherit from your class and override class virtual methods.
Inheritance is accomplished by using a derivation, which means a class is declared by using a base class from which it inherits data and behavior. 
A base class is specified by appending a colon and the name of the base class following the derived class name, like this:
public class Manager : Employee
{
    // Employee fields, properties, methods and events are inherited
    // New Manager fields, properties, methods and events go here...
}

When a class declares a base class, it inherits all the members of the base class except the constructors. 
Unlike C++, a class in C# can only directly inherit from one base class. 
However, because a base class may itself inherit from another class, a class may indirectly inherit multiple base classes. 
Furthermore, a class can directly implement more than one interface.

*Abstract classes have the following features:
*An abstract class cannot be instantiated.
*An abstract class may contain abstract methods and accessors.
*It is not possible to modify an abstract class with the sealed modifier 
because the two modifiers have opposite meanings. 
The sealed modifier prevents a class from being inherited and the abstract modifier requires a class to be inherited.
*A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors

Struct:-
A struct is a value type. 
When a struct is created, the variable to which the struct is assigned holds the struct's actual data. 
When the struct is assigned to a new variable, it is copied. 
The new variable and the original variable therefore contain two separate copies of the same data. 
Changes made to one copy do not affect the other copy.
Value type variables directly contain their values, which means that the memory is allocated inline in whatever context the variable is declared. 

Tupules:
C# tuples are types that you define using a lightweight syntax. 
The advantages include a simpler syntax, rules for conversions based on number (referred to as cardinality) and types of elements, and consistent rules for copies, equality tests, and assignments. 
As a tradeoff, tuples do not support some of the object-oriented idioms associated with inheritance

Interfaces:
*An interface contains definitions for a group of related functionalities that a non-abstract class or a struct must implement.
By using interfaces, you can, for example, include behavior from multiple sources in a class. 
That capability is important in C# because the language doesn't support multiple inheritance of classes. 
In addition, you must use an interface if you want to simulate inheritance for structs, because they can't actually inherit from another struct or class.
Interface members are automatically public, and they can't include any access modifiers. Members also can't be static.

String interpolation:-
Ex:
string name = "Mark";
var date = DateTime.Now;

// Composite formatting:
Console.WriteLine("Hello, {0}! Today is {1}, it's {2:HH:mm} now.", name, date.DayOfWeek, date);
// String interpolation:
Console.WriteLine($"Hello, {name}! Today is {date.DayOfWeek}, it's {date:HH:mm} now.");
// Both calls produce the same output that is similar to:
// Hello, Mark! Today is Wednesday, it's 19:40 now.

*TrimStart, TrimEnd, ToUpper, ToLower, Replace
*Contains, StartsWith, EndWith (returns boolean)


*Numbers in c#
*Branches in c# (for, while , do while)
*List collection in c#
*The decimal type has a smaller range but greater precision than double.
*the math using the decimal type has more digits to the right of the decimal point.
*for each loop

var fibNumbers = new List<int> { 0, 1, 1, 2, 3, 5, 8, 13 };
int count = 0;
foreach (int element in fibNumbers)
{
    count++;
    Console.WriteLine($"Element #{count}: {element}");
}
Console.WriteLine($"Number of elements: {count}");

* When you precede a string with the $ character, you can embed C# code in the string declaration. The actual string replaces that C# code with the value it generates.
*The collection you created uses the List<T> type. This type stores sequences of elements. 
You specify the type of the elements between the angle brackets.

*One important aspect of this List<T> type is that it can grow or shrink, enabling you to add or remove elements. 
*Console.WriteLine();
names.Add("Maria");
names.Add("Bill");
names.Remove("Ana");
foreach (var name in names)
{
  Console.WriteLine($"Hello {name.ToUpper()}!");
}
*Console.WriteLine($"The list has {names.Count} people in it");
*Tour of c#
*Introduction- component oriented, unified type system, versioning, garbage collection, exception handling and type safe.
*Program structure- The key organizational concepts in C# are programs, namespaces, types, members, and assemblies.
*Types and Variables
*Expressions and statements


Local variable declaration:
static void Declarations(string[] args)
{
    int a;
    int b = 2, c = 3;
    a = 1;
    Console.WriteLine(a + b + c);
}

Local constant declaration:
static void ConstantDeclarations(string[] args)
{
    const float pi = 3.1415927f;
    const int r = 25;
    Console.WriteLine(pi * r * r);
}

Expression statement:
static void Expressions(string[] args)
{
    int i;
    i = 123;                // Expression statement
    Console.WriteLine(i);   // Expression statement
    i++;                    // Expression statement
    Console.WriteLine(i);   // Expression statement
}

if statement:
static void IfStatement(string[] args)
{
    if (args.Length == 0)
    {
        Console.WriteLine("No arguments");
    }
    else 
    {
        Console.WriteLine("One or more arguments");
    }
}

switch statement:
static void SwitchStatement(string[] args)
{
    int n = args.Length;
    switch (n) 
    {
        case 0:
            Console.WriteLine("No arguments");
            break;
        case 1:
            Console.WriteLine("One argument");
            break;
        default:
            Console.WriteLine($"{n} arguments");
            break;
    }
}

while statement:
static void WhileStatement(string[] args)
{
    int i = 0;
    while (i < args.Length) 
    {
        Console.WriteLine(args[i]);
        i++;
    }
}

do statement:
static void DoStatement(string[] args)
{
    string s;
    do 
    {
        s = Console.ReadLine();
        Console.WriteLine(s);
    } while (!string.IsNullOrEmpty(s));
}

for statement:
static void ForStatement(string[] args)
{
    for (int i = 0; i < args.Length; i++) 
    {
        Console.WriteLine(args[i]);
    }
}

foreach statement:
static void ForEachStatement(string[] args)
{
    foreach (string s in args) 
    {
        Console.WriteLine(s);
    }
}

break statement:
static void BreakStatement(string[] args)
{
    while (true) 
    {
        string s = Console.ReadLine();
        if (string.IsNullOrEmpty(s)) 
            break;
        Console.WriteLine(s);
    }
}

continue statement:
static void ContinueStatement(string[] args)
{
    for (int i = 0; i < args.Length; i++) 
    {
        if (args[i].StartsWith("/")) 
            continue;
        Console.WriteLine(args[i]);
    }
}

goto statement:
static void GoToStatement(string[] args)
{
    int i = 0;
    goto check;
    loop:
    Console.WriteLine(args[i++]);
    check:
    if (i < args.Length) 
        goto loop;
}

return statement:
static int Add(int a, int b) 
{
    return a + b;
}
static void ReturnStatement(string[] args)
{
   Console.WriteLine(Add(1, 2));
   return;
}
yield statement:
C#

Copy
static System.Collections.Generic.IEnumerable<int> Range(int start, int end) 
{
    for (int i = start; i < end; i++) 
    {
        yield return i;
    }
    yield break;
}
static void YieldStatement(string[] args)
{
    foreach (int i in Range(-10,10)) 
    {
        Console.WriteLine(i);
    }
}
throw statements and try statements:
C#

Copy
static double Divide(double x, double y) 
{
    if (y == 0) 
        throw new DivideByZeroException();
    return x / y;
}
static void TryCatch(string[] args) 
{
    try 
    {
        if (args.Length != 2) 
        {
            throw new InvalidOperationException("Two numbers required");
        }
        double x = double.Parse(args[0]);
        double y = double.Parse(args[1]);
        Console.WriteLine(Divide(x, y));
    }
    catch (InvalidOperationException e) 
    {
        Console.WriteLine(e.Message);
    }
    finally 
    {
        Console.WriteLine("Good bye!");
    }
}
checked and unchecked statements:
C#

Copy
static void CheckedUnchecked(string[] args) 
{
    int x = int.MaxValue;
    unchecked 
    {
        Console.WriteLine(x + 1);  // Overflow
    }
    checked 
    {
        Console.WriteLine(x + 1);  // Exception
    }     
}
lock statement:
C#

Copy
class Account
{
    decimal balance;
    private readonly object sync = new object();
    public void Withdraw(decimal amount) 
    {
        lock (sync) 
        {
            if (amount > balance) 
            {
                throw new Exception(
                    "Insufficient funds");
            }
            balance -= amount;
        }
    }
}
using statement:
C#

Copy
static void UsingStatement(string[] args) 
{
    using (TextWriter w = File.CreateText("test.txt")) 
    {
        w.WriteLine("Line one");
        w.WriteLine("Line two");
        w.WriteLine("Line three");
    }
}





